---
version: 2.1

defaults:
  default-xcode-version: &default-xcode-version "14.1.0"
  default-ruby-version: &default-ruby-version "2.7"

  default-environment: &default-environment
    FASTLANE_SKIP_UPDATE_CHECK: "1"
    DEV_NETWORK_AUTH_USERNAME:
    DEV_NETWORK_AUTH_PASSWORD:
    TEST_NET_TEST_ACCOUNT_MNEMONICS_COMMA_SEPARATED:

  default-artifact-build-environment: &default-build-environment
    <<: *default-environment
    RUST_BACKTRACE: "1"
    SKIP_SLOW_TESTS: "1"

executors:
  macos:
    parameters:
      xcode-version: { type: string, default: *default-xcode-version }
    macos:
      xcode: << parameters.xcode-version >>
    environment:
      HOMEBREW_NO_AUTO_UPDATE: "1"
      HOMEBREW_NO_INSTALL_CLEANUP: "1"
      HOMEBREW_BUNDLE_NO_LOCK: "1"

commands:
  #
  # Copied from `mobilecoin` repo to configure build environment for our submodule.
  #
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          working_directory: Vendor/mobilecoin
          command: |
            set -x

            rustup show
            rustc --version
            cargo --version
            rustup --version
            command -v jq >/dev/null && jq --version || true
            xcodebuild -version
            xcode-select -p
            clang -v
            llvm-gcc -v
            make -v

  env_setup:
    description: Environment Setup
    steps:
      - run:
          name: Configure Cargo to use git cli
          working_directory: Vendor/mobilecoin
          command: |
            mkdir -p ~/.cargo
            echo '[net]' >> ~/.cargo/config
            echo 'git-fetch-with-cli = true' >> ~/.cargo/config

            if [ -f ~/.gitconfig ]; then
              sed -i -e 's/github/git-non-exist-hub/g' ~/.gitconfig # https://github.com/rust-lang/cargo/issues/3900
            fi
      - run:
          name: Set utility environment variables
          command: |
            HOST_TARGET_TRIPLE="$(rustc -Vv | sed -n 's/^host: //p')"
            echo "export HOST_TARGET_TRIPLE=\"$HOST_TARGET_TRIPLE\"" >> $BASH_ENV
            echo "export HOST_TARGET_TRIPLE=\"$(rustc -Vv | sed -n 's/^host: //p')\"" >> $BASH_ENV

  restore-homebrew-cache:
    steps:
      - restore_cache:
          name: Restore Homebrew cache
          key: v1-homebrew-{{ arch }}
      - run:
          name: Update Homebrew
          working_directory: Vendor/mobilecoin
          command: |
            brew --version
            #brew update --preinstall
            #brew --version
      - run:
          name: Install Homebrew dependencies
          working_directory: Vendor/mobilecoin
          command: |
            rm '/usr/local/lib/python3.9/site-packages/six.py'
            brew install llvm
            brew install ninja
            brew install pkg-config
            brew bundle --no-upgrade

  save-homebrew-cache:
    steps:
      - run:
          name: Prepare Homebrew cache for saving
          working_directory: Vendor/mobilecoin
          command: |
            # Make sure latest versions are installed
            time brew bundle

            # Remove all dependencies except those in the Brewfile
            time brew bundle cleanup --force

            brew info
      - save_cache:
          name: Save Homebrew cache
          key: v0-homebrew-{{ arch }}-{{ .Revision }}
          paths:
            - /usr/local/Cellar


  skip-if-cache-directory-exists:
    description: a command to exit the job if directory exists
    parameters:
      directory:
        description: path to directory cache
        type: string
    steps:
      - run: 
          name: If cache exists exit ...
          command: |
            DIR=<<parameters.directory>>
            if test -d "$DIR"; then
                echo "$DIR exists"
                circleci-agent step halt
            else
                echo "$DIR doesnt exists"
            fi

  skip-if-cache-file-exists:
    description: a command to exit the job if file exists
    parameters:
      file:
        description: path to file cache
        type: string
    steps:
      - run: 
          name: If cache exists exit ...
          command: |
            FILE=<<parameters.file>>
            if test -f "$FILE"; then
                echo "$FILE exists"
                circleci-agent step halt
            else
                echo "$FILE doesnt exists"
            fi

  #
  # LibMobileCoin Static Library by build-target
  # 
  restore-build-artifact-cache:
    parameters:
      build-target:
        description: Build target triplet
        type: string
    steps:
      - print-mobilecoin-submodule-hash
      - restore_cache:
          name: Restore build artifact libmobilecoin.a cache for target <<parameters.build-target>>
          keys: 
            - v2-build-artifact-<<parameters.build-target>>-{{ checksum "libmobilecoin_and_vendor_mobilecoin.hash" }}

  save-build-artifact-cache:
    parameters:
      build-target:
        description: Build target triplet
        type: string
    steps:
      - print-mobilecoin-submodule-hash
      - save_cache:
          name: Save build artifact libmobilecoin.a cache for target <<parameters.build-target>>
          key: v2-build-artifact-<<parameters.build-target>>-{{ checksum "libmobilecoin_and_vendor_mobilecoin.hash" }}
          paths:
            - ~/project/libmobilecoin/out/ios/target/<<parameters.build-target>>/mobile-release

  #
  # LibMobileCoin Headers
  # 
  restore-build-artifact-headers-cache:
    steps:
      - print-mobilecoin-submodule-hash
      - restore_cache:
          name: Restore build artifact headers cache
          keys: 
            - v2-build-artifact-headers-{{ checksum "libmobilecoin_and_vendor_mobilecoin.hash" }}

  save-build-artifact-headers-cache:
    steps:
      - print-mobilecoin-submodule-hash
      - save_cache:
          name: Save build artifact headers cache
          key: v2-build-artifact-headers-{{ checksum "libmobilecoin_and_vendor_mobilecoin.hash" }}
          paths:
            - ~/project/libmobilecoin/out/ios/include

  #
  # Rustup Toolchain Cache's
  #
  restore-rustup-cache:
    parameters:
      build-target:
        description: Build target triplet
        type: string
    steps:
      - restore_cache:
          name: Restore Rustup cache for target <<parameters.build-target>>
          keys: 
            - v0-rustup-<<parameters.build-target>>-{{ checksum "libmobilecoin/toolchain-config.env" }}

  save-rustup-cache:
    parameters:
      build-target:
        description: Build target triplet
        type: string
    steps:
      - save_cache:
          name: Save Rustup cache for target aarch64-apple-ios-sim
          key: v0-rustup-<<parameters.build-target>>-{{ checksum "libmobilecoin/toolchain-config.env" }}
          paths:
            - ~/.rustup/toolchains

  #
  # Dependencies
  #
  install-rust:
    steps:
      - run:
          name: Install Rust
          command: |
            command -v rustup >/dev/null \
              || curl https://sh.rustup.rs --tlsv1.2 -sSf | sh -s -- -y --default-toolchain stable
            # Installs the toolchain specified in `rust-toolchain`
            "$HOME/.cargo/bin/rustup" show active-toolchain

  prefetch-cargo-deps:
    steps:
      - run:
          name: Fetch project Cargo dependencies
          working_directory: Vendor/mobilecoin
          command: |
            set -x
            time cargo fetch --locked
            (cd consensus/enclave/trusted && time cargo fetch --locked)
            (cd fog/ingest/enclave/trusted && time cargo fetch --locked)
            (cd fog/ledger/enclave/trusted && time cargo fetch --locked)
            (cd fog/view/enclave/trusted && time cargo fetch --locked)

  prepare-for-build:
    parameters:
      cbindgen: { type: boolean, default: false }
      os: { type: enum, enum: [ "linux", "macos", "windows" ], default: linux }
    steps:
      - checkout
      - when:
          condition: { equal: [ << parameters.os >>, macos ] }
          steps: [ restore-homebrew-cache ]
      - install-rust
      - env_setup
      - print_versions
      - prefetch-cargo-deps

  #
  # libmobilecoin-ios-artifacts cocoapods lint/spec publish
  #
  init-artifacts-submodule:
    description: Initialize artifacts submodule
    steps:
      - run:
          name: Run git submodule update --init
          working_directory: Artifacts
          command: git submodule update --init --depth 1 --recursive

  init-mobilecoin-submodule:
    description: Initialize mobilecoin submodule
    steps:
      - run:
          name: Run git submodule update --init
          working_directory: Vendor/mobilecoin
          command: git submodule update --init --depth 1 --recursive

  print-mobilecoin-submodule-hash:
    description: Save mobilecoin submodule hash to file
    steps:
      - run:
          name: Save submodule hash to file for checksumming
          command: |
            cat <(git submodule status) <(git ls-files -s libmobilecoin | git hash-object --stdin) > libmobilecoin_and_vendor_mobilecoin.hash

  print-tool-versions:
    description: Print versions of various tools used
    steps:
      - run:
          name: Print tool versions
          command: |
            set -x
            brew config
            brew list --versions
            bundle env
            bundle exec pod env
            bundle config unset deployment
            printenv

  set-ruby-version:
    description: Set Ruby Version
    parameters:
      ruby-version:
        type: string
        default: *default-ruby-version
    steps:
      - run:
          name: Use Ruby << parameters.ruby-version >>
          command: |
            echo 'source /usr/local/share/chruby/chruby.sh' >> $BASH_ENV
            echo 'chruby ruby-<< parameters.ruby-version >>' >> $BASH_ENV

  install-gems:
    description: Install Ruby gems
    parameters:
      ruby-version:
        type: string
        default: *default-ruby-version
    steps:
      - restore_cache:
          name: Restore Ruby gem cache
          keys:
            - v0-ruby-<< parameters.ruby-version >>-gems-{{ checksum "Gemfile.lock" }}
            - v0-ruby-<< parameters.ruby-version >>-gems-
      - run:
          name: Install root bundler dependencies
          command: |
            bundle config set --local deployment 'true'
            bundle config set --local path '.vendor/bundle'
            bundle config set --local clean 'true'
            bundle check || bundle install
      - save_cache:
          name: Save Ruby gem cache
          key: v0-ruby-<< parameters.ruby-version >>-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - .vendor/bundle

  # 
  # MobileCoin-Swift for testing
  #
  init-mobilecoin-swift:
    description: Initialize MobileCoin-Swift
    steps:
      - run:
          name: Clone MobileCoin-Swift, checkout matching branch for tests if available.
          command: |
            cd ~
            git clone git@github.com:mobilecoinofficial/MobileCoin-Swift.git
            cd MobileCoin-Swift
            git fetch 
            git checkout ${CIRCLE_BRANCH} || true


  apply-cherry-pick:
    description: Cherry-Pick changes to make swift repo compatible
    steps:
      - run:
          name: Cherry-Pick changes to make swift repo compatible
          working_directory: ~/MobileCoin-Swift
          command: |
            git fetch origin cicd/temporary-version-syntax-change
            git cherry-pick 1a34956a8910b1b6f866b0ac0c52d286691e6dec

  configure-cocoapod-keys:
    description: Configure cocoapod-keys secrets
    parameters:
      swift-project:
        type: string
        default: "Example"
    steps:
      - run:
          name: Configure cocoapod-keys secrets
          working_directory: ~/MobileCoin-Swift/<<parameters.swift-project>>
          command: |
            bundle exec pod keys set devNetworkAuthUsername "${DEV_NETWORK_AUTH_USERNAME}"
            bundle exec pod keys set devNetworkAuthPassword "${DEV_NETWORK_AUTH_PASSWORD}"
            bundle exec pod keys set testNetTestAccountMnemonicsCommaSeparated "${TEST_NET_TEST_ACCOUNT_MNEMONICS_COMMA_SEPARATED}"

  install-swift-gems:
    description: Install Ruby gems
    parameters:
      ruby-version:
        type: string
        default: *default-ruby-version
    steps:
      - restore_cache:
          name: Restore Ruby gem cache swift sdk
          keys:
            - v2-ruby-<< parameters.ruby-version >>-gems-{{ checksum "~/MobileCoin-Swift/Gemfile.lock" }}
            - v2-ruby-<< parameters.ruby-version >>-gems-
      - run:
          name: Install root bundler dependencies
          working_directory: ~/MobileCoin-Swift
          command: |
            bundle config set --local deployment 'true'
            bundle config set --local path '~/MobileCoin-Swift/.vendor/bundle'
            bundle config set --local clean 'true'
            bundle check || bundle install
      - save_cache:
          name: Save Ruby gem cache swift sdk
          key: v1-ruby-<< parameters.ruby-version >>-gems-{{ checksum "~/MobileCoin-Swift/Gemfile.lock" }}
          paths:
            - ~/MobileCoin-Swift/.vendor/bundle

  install-example-gems:
    description: Install gems for Example project
    parameters:
      ruby-version:
        type: string
        default: *default-ruby-version
    steps:
      - restore_cache:
          name: Restore Ruby gem cache for Example project
          keys:
            - v0-example-ruby-<< parameters.ruby-version >>-gems-{{ checksum "~/MobileCoin-Swift/Example/Gemfile.lock" }}
            - v0-example-ruby-<< parameters.ruby-version >>-gems-
      - run:
          name: Install Example project bundler dependencies
          working_directory: ~/MobileCoin-Swift/Example
          command: |
            bundle config set --local deployment 'true'
            bundle config set --local path '.vendor/bundle'
            bundle config set --local clean 'true'
            bundle check || bundle install
      - save_cache:
          name: Save Ruby gem cache for Example project
          key: v0-example-ruby-<< parameters.ruby-version >>-gems-{{ checksum "~/MobileCoin-Swift/Example/Gemfile.lock" }}
          paths:
            - ~/MobileCoin-Swift/Example/.vendor/bundle

  install-example-http-gems:
    description: Install gems for ExampleHTTP project
    parameters:
      ruby-version:
        type: string
        default: *default-ruby-version
    steps:
      - restore_cache:
          name: Restore Ruby gem cache for ExampleHTTP project
          keys:
            - v0-example-http-ruby-<< parameters.ruby-version >>-gems-{{ checksum "~/MobileCoin-Swift/ExampleHTTP/Gemfile.lock" }}
            - v0-example-http-ruby-<< parameters.ruby-version >>-gems-
      - run:
          name: Install ExampleHTTP project bundler dependencies
          working_directory: ~/MobileCoin-Swift/ExampleHTTP
          command: |
            bundle config set --local deployment 'true'
            bundle config set --local path '.vendor/bundle'
            bundle config set --local clean 'true'
            bundle check || bundle install
      - save_cache:
          name: Save Ruby gem cache for ExampleHTTP project
          key: v0-example-http-ruby-<< parameters.ruby-version >>-gems-{{ checksum "~/MobileCoin-Swift/ExampleHTTP/Gemfile.lock" }}
          paths:
            - ~/MobileCoin-Swift/ExampleHTTP/.vendor/bundle

  install-example-pods:
    description: Install pods for Example project
    parameters:
      xcode-version:
        type: string
    steps:
      - restore_cache:
          name: Restore CocoaPods cache
          keys:
            - v0-xcode-<< parameters.xcode-version >>-example-pods-{{ checksum "~/MobileCoin-Swift/Example/Podfile.lock" }}
            - v0-xcode-<< parameters.xcode-version >>-example-pods-
      - run: 
          name: Install pods for Example project
          command: cd ~/MobileCoin-Swift/Example && bundle exec pod install
      - save_cache:
          name: Save CocoaPods cache
          key: v0-xcode-<< parameters.xcode-version >>-example-pods-{{ checksum "~/MobileCoin-Swift/Example/Podfile.lock" }}
          paths:
            - ~/MobileCoin-Swift/Example/Pods

  install-example-http-pods:
    description: Install pods for ExampleHTTP project
    parameters:
      xcode-version:
        type: string
    steps:
      - restore_cache:
          name: Restore CocoaPods cache
          keys:
            - v0-xcode-<< parameters.xcode-version >>-example-http-pods-{{ checksum "~/MobileCoin-Swift/ExampleHTTP/Podfile.lock" }}
            - v0-xcode-<< parameters.xcode-version >>-example-http-pods-
      - run: 
          name: Install pods for ExampleHTTP project
          command: cd ~/MobileCoin-Swift/ExampleHTTP && bundle exec pod install
      - save_cache:
          name: Save CocoaPods cache
          key: v0-xcode-<< parameters.xcode-version >>-example-http-pods-{{ checksum "~/MobileCoin-Swift/ExampleHTTP/Podfile.lock" }}
          paths:
            - ~/MobileCoin-Swift/ExampleHTTP/Pods

  init-mobilecoin-swift-submodules:
    description: Initialize MobileCoin-Swift submodules
    steps:
      - run:
          name: Clone current branch of LibMobileCoin and its submodules
          working_directory: ~/MobileCoin-Swift
          command: |
            mkdir -p Vendor/libmobilecoin-ios-artifacts
            git clone --branch ${CIRCLE_BRANCH} ${CIRCLE_REPOSITORY_URL} Vendor/libmobilecoin-ios-artifacts
            cd Vendor/libmobilecoin-ios-artifacts
            git submodule update --init --recursive --depth 1


  set-git-credentials:
    description: Set git credentials
    steps:
      - run:
          name: Set git credentials
          command: |
            git config user.email "mobilecoin-ci@mobilecoin.com"
            git config user.name "mobilecoin-ci"

  set-artifacts-git-credentials:
    description: Set git credentials
    steps:
      - run:
          name: Set Artifacts git credentials
          working_directory: Artifacts
          command: |
            git config user.email "mobilecoin-ci@mobilecoin.com"
            git config user.name "mobilecoin-ci"

  lint-locally-podspec:
    steps:
      - run:
          name: Lint podspec locally
          command: make lint-locally

  publish-to-trunk:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "16:4d:90:f0:c4:2b:2e:ac:96:7b:6b:8b:e0:ce:72:28"
      - run:
          name: Publish Pod to Trunk
          command: make publish

  make-push-generated:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "0b:63:05:5c:f9:37:25:a8:85:7a:8e:2c:8d:96:1a:39"
      - run:
          name: Push generated to remote
          command: make push-generated

  check-dirty-git:
    steps:
      - run:
          name: Check dirty git
          command: |
            if [[ -n $(git status --porcelain) ]]; then
              echo "repo is dirty"
              git status
              exit 1
            fi

jobs:
  init-and-lint:
    parameters:
      xcode-version:
        type: string
        default: *default-xcode-version
    macos:
      xcode: << parameters.xcode-version >>
    environment:
      <<: *default-environment
      FL_BUILDLOG_PATH: ../output/buildlogs
      SCAN_OUTPUT_DIRECTORY: ../output/scan
      SCAN_OUTPUT_TYPES: junit
    steps:
      - checkout
      - init-artifacts-submodule
      - init-mobilecoin-submodule
      - set-ruby-version
      - install-gems
      - print-tool-versions
      - set-git-credentials
      - lint-locally-podspec
      - check-dirty-git

  publish-pod-release:
    parameters:
      xcode-version:
        type: string
        default: *default-xcode-version
    macos:
      xcode: << parameters.xcode-version >>
    environment:
      <<: *default-environment
    steps:
      - checkout
      - init-artifacts-submodule
      - init-mobilecoin-submodule
      - set-ruby-version
      - install-gems
      - print-tool-versions
      - set-git-credentials
      - publish-to-trunk
      
  build-artifacts:
    parameters:
      xcode-version: { type: string, default: *default-xcode-version }
      build-target:
        type: string
        default: "aarch64-apple-ios-sim"
    executor:
      name: macos
      xcode-version: << parameters.xcode-version >>
    environment:
      <<: *default-build-environment
      OPENSSL_BIN: /usr/local/opt/openssl/bin/openssl
    steps:
      - checkout
      - init-mobilecoin-submodule
      - restore-build-artifact-cache:
          build-target: <<parameters.build-target>>
      - skip-if-cache-file-exists:
          file: ~/project/libmobilecoin/out/ios/target/<<parameters.build-target>>/mobile-release/libmobilecoin.a
      - prepare-for-build: { os: macos }
      - restore-rustup-cache:
          build-target: <<parameters.build-target>>
      - run:
          working_directory: libmobilecoin
          name: Build libmobilecoin static libraries
          command: |
            make setup
            make << parameters.build-target >>

      - save-build-artifact-headers-cache
      - save-build-artifact-cache:
          build-target: <<parameters.build-target>>

  copy-artifacts:
    parameters:
      xcode-version: { type: string, default: *default-xcode-version }
    executor:
      name: macos
      xcode-version: << parameters.xcode-version >>
    environment:
      <<: *default-build-environment
    steps:
      - checkout
      - run:
          name: Install git-lfs mac
          command: |
            git lfs install
      - init-artifacts-submodule
      - init-mobilecoin-submodule
      - run:
          name: Make output directories
          working_directory: libmobilecoin
          command: |
            mkdir -p out/ios/target

      - restore-build-artifact-cache:
          build-target: aarch64-apple-ios-sim 
      - restore-build-artifact-cache:
          build-target: aarch64-apple-ios 
      - restore-build-artifact-cache:
          build-target: x86_64-apple-ios 
      - restore-build-artifact-cache:
          build-target: x86_64-apple-darwin 
      - restore-build-artifact-cache:
          build-target: aarch64-apple-darwin 
      - restore-build-artifact-headers-cache
      - run:
          name: Copy Artifacts 
          command: |
            make copy

      - set-git-credentials
      - set-artifacts-git-credentials
      - run:
          name: Push artifacts to remote w/ LFS
          working_directory: Artifacts
          command: |
            git checkout main
            git config pull.rebase false
            git pull origin main
            git add .
            git commit -m 'Add compiled static libraries from CICD'
            git push origin main

      - run:
          name: Update libmobilecoin submodule tracked commit hash
          command: |
            git add Artifacts
            git commit -m '[skip ci] Update Artifacts submodule commit hash for compiled static libraries from CICD'
            git push origin ${CIRCLE_BRANCH}

  make-generate:
    machine: 
      image: ubuntu-2004:202111-02
    environment:
      <<: *default-build-environment
    steps:
      - checkout
      - init-mobilecoin-submodule
      - set-git-credentials
      - run:
          name: Pull latest to get new CICD changes
          command: |
            git config pull.rebase false
            git pull origin ${CIRCLE_BRANCH}
      - run:
          name: make generate (proto -> grpc swift) 
          command: |
            make generate
      - make-push-generated

  test-example-http-with-mobilecoin-swift:
    parameters:
      xcode-version:
        type: string
        default: *default-xcode-version
      swift-project:
        type: string
        default: "ExampleHTTP"
    macos:
      xcode: << parameters.xcode-version >>
    environment:
      <<: *default-environment
      FL_BUILDLOG_PATH: ../output/buildlogs
      SCAN_OUTPUT_DIRECTORY: ../output/scan
      SCAN_OUTPUT_TYPES: junit
    steps:
      - checkout
      - run:
          name: Install git-lfs mac
          command: |
            git lfs install
      - init-artifacts-submodule
      - init-mobilecoin-submodule
      - set-ruby-version
      - set-git-credentials
      - init-mobilecoin-swift
      - init-mobilecoin-swift-submodules
      #- apply-cherry-pick
      - install-swift-gems
      - install-example-http-gems
      - configure-cocoapod-keys:
          swift-project: << parameters.swift-project >>
      - install-example-http-pods:
          xcode-version: << parameters.xcode-version >>
      - run:
          name: make test
          working_directory: ~/MobileCoin-Swift/<<parameters.swift-project>>
          command: |
            make test
            
  test-example-with-mobilecoin-swift:
    parameters:
      xcode-version:
        type: string
        default: *default-xcode-version
      swift-project:
        type: string
        default: "Example"
    macos:
      xcode: << parameters.xcode-version >>
    environment:
      <<: *default-environment
      FL_BUILDLOG_PATH: ../output/buildlogs
      SCAN_OUTPUT_DIRECTORY: ../output/scan
      SCAN_OUTPUT_TYPES: junit
    steps:
      - checkout
      - run:
          name: Install git-lfs mac
          command: |
            git lfs install
      - init-artifacts-submodule
      - init-mobilecoin-submodule
      - set-ruby-version
      - set-git-credentials
      - init-mobilecoin-swift
      - init-mobilecoin-swift-submodules
      #- apply-cherry-pick
      - install-swift-gems
      - install-example-gems
      - configure-cocoapod-keys:
          swift-project: << parameters.swift-project >>
      - install-example-pods:
          xcode-version: << parameters.xcode-version >>
      - run:
          name: make test
          working_directory: ~/MobileCoin-Swift/<<parameters.swift-project>>
          command: |
            make test

workflows:
  version: 2
  build:
    jobs:
      - init-and-lint:
          name: init-and-lint-xcode-<< matrix.xcode-version >>
          matrix:
            parameters:
              xcode-version: [*default-xcode-version]

      # ios-sim
      - build-artifacts:
          name: build-artifacts-m1-ios-sim-xcode-<< matrix.xcode-version >>
          build-target: "aarch64-apple-ios-sim" 
          matrix:
            parameters:
              xcode-version: [*default-xcode-version]

      # ios-device
      - build-artifacts:
          name: build-artifacts-ios-device-xcode-<< matrix.xcode-version >>
          build-target: "aarch64-apple-ios" 
          matrix:
            parameters:
              xcode-version: [*default-xcode-version]

      # intel-ios-sim
      - build-artifacts:
          name: build-artifacts-intel-ios-sim-xcode-<< matrix.xcode-version >>
          build-target: "x86_64-apple-ios"
          matrix:
            parameters:
              xcode-version: [*default-xcode-version]

      # intel-macos
      - build-artifacts:
          name: build-artifacts-intel-macos-xcode-<< matrix.xcode-version >>
          build-target: "x86_64-apple-darwin"
          matrix:
            parameters:
              xcode-version: [*default-xcode-version]

      # apple-silicon-macos
      - build-artifacts:
          name: build-artifacts-m1-macos-xcode-<< matrix.xcode-version >>
          build-target: "aarch64-apple-darwin"
          matrix:
            parameters:
              xcode-version: [*default-xcode-version]

      - copy-artifacts:
          name: copy-artifacats
          requires:
            - build-artifacts-m1-ios-sim-xcode-<< matrix.xcode-version >>
            - build-artifacts-ios-device-xcode-<< matrix.xcode-version >>
            - build-artifacts-intel-ios-sim-xcode-<< matrix.xcode-version >>
            - build-artifacts-intel-macos-xcode-<< matrix.xcode-version >>
            - build-artifacts-m1-macos-xcode-<< matrix.xcode-version >>
          matrix:
            parameters:
              xcode-version: [*default-xcode-version]

      - make-generate:
          name: make-generate
          requires:
            - copy-artifacts

      - test-example-http-with-mobilecoin-swift:
          name: test-example-http-with-mobilecoin-swift-<< matrix.xcode-version >>
          requires: 
            - make-generate
          matrix:
            parameters:
              xcode-version: [*default-xcode-version]

      - test-example-with-mobilecoin-swift:
          name: test-example-with-mobilecoin-swift-<< matrix.xcode-version >>
          requires: 
            - make-generate
          matrix:
            parameters:
              xcode-version: ["12.5.1"]

      - publish-pod-release:
          filters:
            branches:
              only:
                 - master
                 - /release\/.*/
            
