version: 2.1

defaults:
  default-xcode-version: &default-xcode-version "12.2.0"
  default-ruby-version: &default-ruby-version "2.7"

  default-environment: &default-environment
    FASTLANE_SKIP_UPDATE_CHECK: "1"

  default-artifact-build-environment: &default-build-environment
    <<: *default-environment
    SCCACHE_IDLE_TIMEOUT: "1200"
    SCCACHE_CACHE_SIZE: 1G
    SCCACHE_ERROR_LOG: /tmp/sccache.log
    IAS_MODE: DEV
    SGX_MODE: SW
    RUST_BACKTRACE: "1"
    SKIP_SLOW_TESTS: "1"

executors:
  macos:
    parameters:
      xcode-version: { type: string, default: *default-xcode-version }
    macos:
      xcode: << parameters.xcode-version >>
    environment:
      HOMEBREW_NO_AUTO_UPDATE: "1"
      HOMEBREW_NO_INSTALL_CLEANUP: "1"
      HOMEBREW_BUNDLE_NO_LOCK: "1"

commands:
  # Copied from `mobilecoin` repo to configure build environment for our submodule.
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          working_directory: Vendor/mobilecoin
          command: |
            set -x

            rustup show
            rustc --version
            cargo --version
            rustup --version
            sccache --version
            command -v jq >/dev/null && jq --version || true

  env_setup:
    description: Environment Setup
    steps:
      - run:
          name: Configure Cargo to use git cli
          working_directory: Vendor/mobilecoin
          command: |
            mkdir -p ~/.cargo
            echo '[net]' >> ~/.cargo/config
            echo 'git-fetch-with-cli = true' >> ~/.cargo/config

            if [ -f ~/.gitconfig ]; then
              sed -i -e 's/github/git-non-exist-hub/g' ~/.gitconfig # https://github.com/rust-lang/cargo/issues/3900
            fi
      - run:
          name: Set utility environment variables
          command: |
            HOST_TARGET_TRIPLE="$(rustc -Vv | sed -n 's/^host: //p')"
            echo "export HOST_TARGET_TRIPLE=\"$HOST_TARGET_TRIPLE\"" >> $BASH_ENV
            echo "export HOST_TARGET_TRIPLE=\"$(rustc -Vv | sed -n 's/^host: //p')\"" >> $BASH_ENV
  enable_sccache:
    description: Enabling sccache
    steps:
      - run:
          name: Enable sccache
          working_directory: Vendor/mobilecoin
          command: |
            echo 'export RUSTC_WRAPPER=sccache' >> $BASH_ENV
            echo 'export CMAKE_C_COMPILER_LAUNCHER=sccache' >> $BASH_ENV
            echo 'export CMAKE_CXX_COMPILER_LAUNCHER=sccache' >> $BASH_ENV

            # Sccache doesn't support incremental building
            echo 'export CARGO_INCREMENTAL=0' >> $BASH_ENV

            # Set cache dir explicitly so that all platforms use the same location
            echo 'export SCCACHE_DIR=$HOME/.cache/sccache' >> $BASH_ENV

  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: v0-sccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}.

  # Saves sccache cache on a per-job, per-architecture basis. Adds the git revision as a suffix
  # so that each saved cache is stored using a unique key.
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-sccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}.{{ .Revision }}
          paths:
            - ~/.cache/sccache

  record-sccache-cache-stats:
    steps:
      - run:
          name: Print sccache statistics
          working_directory: Vendor/mobilecoin
          command: sccache --show-stats
      - store_artifacts:
          path: /tmp/sccache.log
          destination: logs/sccache.log

  restore-cargo-cache:
    steps:
      - restore_cache:
          name: Restore Cargo cache
          key: v0-cargo-{{ arch }}

  # Saves cargo cache on a per-architecture basis. Adds the git revision as a suffix so that each
  # saved cache is stored using a unique key.
  save-cargo-cache:
    steps:
      - run:
          name: Prepare Cargo cache for saving
          command: |
            set -x

            command -v cargo-trim >/dev/null \
              || (cd .. && rustup run --install stable cargo install cargo-trim)

            # Configure cargo-trim with the project's Cargo.lock files
            mkdir -p ~/.config
            cargo trim init
            pushd "consensus/enclave/trusted"
            cargo trim init
            popd
            pushd "fog/ingest/enclave/trusted"
            cargo trim init
            popd
            pushd "fog/ledger/enclave/trusted"
            cargo trim init
            popd
            pushd "fog/view/enclave/trusted"
            cargo trim init
            popd

            # Clean dependencies not in the Cargo.lock
            time cargo trim --orphan

            # Make sure all dependencies are downloaded, since there appears to be
            # a bug where cargo trim erroneously removes certain git repos.
            time cargo fetch --locked
            (cd consensus/enclave/trusted && time cargo fetch --locked)
            (cd fog/ingest/enclave/trusted && time cargo fetch --locked)
            (cd fog/ledger/enclave/trusted && time cargo fetch --locked)
            (cd fog/view/enclave/trusted && time cargo fetch --locked)

            # Remove the registry src dir since it's the largest dir and it's
            # recreatable from the archives in ~/.cargo/cache
            time cargo trim --wipe src

            # Run git compress on cached repos
            time cargo trim --gc all

            # Display Cargo cache stats
            cargo trim --query

            # Uninstall binary cargo crates that don't need to be cached
            time cargo uninstall cargo-trim
      - save_cache:
          name: Save Cargo cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-cargo-{{ arch }}-{{ .Revision }}
          # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          paths:
            - ~/.cargo/.crates.toml
            - ~/.cargo/bin
            - ~/.cargo/git/checkout
            - ~/.cargo/git/db
            - ~/.cargo/registry/cache
            - ~/.cargo/registry/index

  print-cargo-cache-stats:
    steps:
      - run:
          name: Print Cargo cache statistics
          working_directory: Vendor/mobilecoin
          command: |
            cargo cache
            cargo cache local || true

  restore-homebrew-cache:
    steps:
      - restore_cache:
          name: Restore Homebrew cache
          key: v0-homebrew-{{ arch }}
      - run:
          name: Update Homebrew
          working_directory: Vendor/mobilecoin
          command: |
            brew --version
            brew update --preinstall
            brew --version
      - run:
          name: Install Homebrew dependencies
          working_directory: Vendor/mobilecoin
          command: |
            rm '/usr/local/lib/python3.9/site-packages/six.py' || true
            # rm '/usr/local/lib/python3.8/site-packages/six.py'
            brew bundle --no-upgrade

  save-homebrew-cache:
    steps:
      - run:
          name: Prepare Homebrew cache for saving
          command: |
            # Make sure latest versions are installed
            time brew bundle

            # Remove all dependencies except those in the Brewfile
            time brew bundle cleanup --force

            brew info
      - save_cache:
          name: Save Homebrew cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-homebrew-{{ arch }}-{{ .Revision }}
          paths:
            - /usr/local/Cellar

  restore-rustup-cache:
    steps:
      - restore_cache:
          name: Restore Rustup cache
          key: v0-rustup-{{ arch }}

  save-rustup-cache:
    steps:
      - save_cache:
          name: Save Rustup cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-rustup-{{ arch }}-{{ .Revision }}
          paths:
            - ~/.rustup/toolchains

  install-rust:
    steps:
      - run:
          name: Install Rust
          command: |
            command -v rustup >/dev/null \
              || curl https://sh.rustup.rs --tlsv1.2 -sSf | sh -s -- -y --default-toolchain stable
            # Installs the toolchain specified in `rust-toolchain`
            "$HOME/.cargo/bin/rustup" show active-toolchain

  install-ci-deps:
    parameters:
      cbindgen: { type: boolean, default: false }
    steps:
      - run:
          name: Install CI dependencies
          command: |
            cd ..
            command -v sccache >/dev/null || rustup run --install stable cargo install sccache
            command -v cargo-cache >/dev/null || rustup run --install stable cargo install cargo-cache
            command -v cargo2junit >/dev/null || rustup run --install stable cargo install cargo2junit
            <<# parameters.cbindgen >>
              command -v cbindgen >/dev/null || rustup run --install stable cargo install cbindgen
            <</ parameters.cbindgen >>

  update-ci-deps:
    steps:
      - run:
          name: Update CI dependencies
          working_directory: Vendor/mobilecoin
          command: |
            cd ..
            rustup default stable
            command -v cargo-install-update >/dev/null || cargo install cargo-update
            cargo install-update --all
            time cargo uninstall cargo-update

  prefetch-cargo-deps:
    steps:
      - run:
          name: Fetch project Cargo dependencies
          working_directory: Vendor/mobilecoin
          command: |
            set -x
            time cargo fetch --locked
            (cd consensus/enclave/trusted && time cargo fetch --locked)
            (cd fog/ingest/enclave/trusted && time cargo fetch --locked)
            (cd fog/ledger/enclave/trusted && time cargo fetch --locked)
            (cd fog/view/enclave/trusted && time cargo fetch --locked)

  prepare-for-build:
    parameters:
      cbindgen: { type: boolean, default: false }
      os: { type: enum, enum: [ "linux", "macos", "windows" ], default: linux }
    steps:
      - checkout
      - when:
          condition: { equal: [ << parameters.os >>, macos ] }
          steps: [ restore-homebrew-cache ]
      - install-rust
      - restore-cargo-cache
      - env_setup
      - install-ci-deps:
          cbindgen: << parameters.cbindgen >>
      - when:
          condition: { equal: [ << pipeline.git.branch >>, master ] }
          steps: [ update-ci-deps ]
      - print_versions
      - enable_sccache
      # Cache is only saved when building from master. We don't restore sccache on
      # master so that the cache is clean when saved.
      - unless:
          condition: { equal: [ << pipeline.git.branch >>, master ] }
          steps: [ restore-sccache-cache ]
      - prefetch-cargo-deps

  post-build:
    steps:
      - record-sccache-cache-stats
      - print-cargo-cache-stats


  # libmobilecoin-ios-artifacts cocoapods lint/spec publish

  init-mobilecoin-submodule:
    description: Initialize mobilecoin submodule
    steps:
      - run:
          name: Run git submodule update --init
          working_directory: Vendor/mobilecoin
          command: git submodule update --init --depth 1 --recursive

  print-tool-versions:
    description: Print versions of various tools used
    steps:
      - run:
          name: Print tool versions
          command: |
            set -x
            brew config
            brew list --versions
            bundle env
            bundle exec pod env
            printenv

  set-ruby-version:
    description: Set Ruby Version
    parameters:
      ruby-version:
        type: string
        default: *default-ruby-version
    steps:
      - run:
          name: Use Ruby << parameters.ruby-version >>
          command: |
            echo 'source /usr/local/share/chruby/chruby.sh' >> $BASH_ENV
            echo 'chruby ruby-<< parameters.ruby-version >>' >> $BASH_ENV

  install-gems:
    description: Install Ruby gems
    parameters:
      ruby-version:
        type: string
        default: *default-ruby-version
    steps:
      - restore_cache:
          name: Restore Ruby gem cache
          keys:
            - v0-ruby-<< parameters.ruby-version >>-gems-{{ checksum "Gemfile.lock" }}
            - v0-ruby-<< parameters.ruby-version >>-gems-
      - run:
          name: Install root bundler dependencies
          command: |
            bundle config set --local deployment 'true'
            bundle config set --local path '.vendor/bundle'
            bundle config set --local clean 'true'
            bundle check || bundle install
      - save_cache:
          name: Save Ruby gem cache
          key: v0-ruby-<< parameters.ruby-version >>-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - .vendor/bundle

  set-git-credentials:
    description: Set git credentials
    steps:
      - run:
          name: Set git credentials
          command: |
            git config user.email "mobilecoin-ci@mobilecoin.com"
            git config user.name "mobilecoin-ci"

  lint-locally-podspec:
    steps:
      - run:
          name: Lint podspec locally
          command: make lint-locally

  publish-to-trunk:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "16:4d:90:f0:c4:2b:2e:ac:96:7b:6b:8b:e0:ce:72:28"
      - run:
          name: Publish Pod to Trunk
          command: make publish

  check-dirty-git:
    steps:
      - run:
          name: Check dirty git
          command: |
            if [[ -n $(git status --porcelain) ]]; then
              echo "repo is dirty"
              git status
              exit 1
            fi

jobs:
  init-and-lint:
    parameters:
      xcode-version:
        type: string
        default: *default-xcode-version
    macos:
      xcode: << parameters.xcode-version >>
    environment:
      <<: *default-environment
      FL_BUILDLOG_PATH: ../output/buildlogs
      SCAN_OUTPUT_DIRECTORY: ../output/scan
      SCAN_OUTPUT_TYPES: junit
    steps:
      - checkout
      - init-mobilecoin-submodule
      - set-ruby-version
      - install-gems
      - print-tool-versions
      - set-git-credentials
      - lint-locally-podspec
      #- run: make build # TODO
      #- run: make test # TODO
      - store_artifacts: { path: output }
      - store_test_results: { path: output/scan }
      - store_artifacts: { path: ~/Library/Logs/DiagnosticReports }
      - check-dirty-git

  publish-pod-release:
    parameters:
      xcode-version:
        type: string
        default: *default-xcode-version
    macos:
      xcode: << parameters.xcode-version >>
    environment:
      <<: *default-environment
    steps:
      - checkout
      - init-mobilecoin-submodule
      - set-ruby-version
      - install-gems
      - print-tool-versions
      - set-git-credentials
      - publish-to-trunk

  # Build/publish Android bindings
  #android-bindings:
    #executor: android-bindings-executor
    #environment:
      #<<: *default-environment
    #steps:
      #- checkout
      #- print_versions
      #- enable_sccache
      #- restore_cache:
          #name: Restore cargo cache
          #key: android-bindings-cargo-cache-stable
      #- restore_cache:
          #name: Restore sccache cache
          #key: android-bindings-sccache-cache-stable

      #- run:
          #name: Build
          #command: |
            #cd android-bindings
            #RUST_BACKTRACE=full make libs
      #- save_cache:
          #name: Save cargo cache
          #key: android-bindings-cargo-cache-stable-{{ epoch }}
          #paths:
            #- "/usr/local/cargo"
      #- save_cache:
          #name: Save sccache cache
          #key: android-bindings-sccache-cache-stable-{{ epoch }}
          #paths:
            #- "~/.cache/sccache"

  # Build using macOS
  build-artifacts:
    parameters:
      xcode-version: { type: string, default: *default-xcode-version }
    executor:
      name: macos
      xcode-version: << parameters.xcode-version >>
    environment:
      <<: *default-build-environment
      OPENSSL_BIN: /usr/local/opt/openssl/bin/openssl
      SCCACHE_CACHE_SIZE: 450M
      RUSTFLAGS: -D warnings -C target-cpu=penryn
      CONSENSUS_ENCLAVE_CSS: /Users/distiller/project/sgx/css/src/valid.css
    steps:
      - checkout
      - init-mobilecoin-submodule
      - prepare-for-build: { os: macos }
      - run:
          working_directory: Vendor/mobilecoin
          name: Cargo build
          command: |
            cd libmobilecoin
            make 
      # - check-dirty-git // git will be dirty from rust-bitcode submodule
      - when:
          condition: { equal: [ << pipeline.git.branch >>, master ] }
          steps: [ save-sccache-cache, save-cargo-cache, save-homebrew-cache ]
      - post-build



workflows:
  version: 2
  build:
    jobs:
      - init-and-lint:
          name: init-and-lint-xcode-<< matrix.xcode-version >>
          matrix:
            parameters:
              xcode-version: [*default-xcode-version]
      - build-artifacts:
          name: build-artifacts-xcode-<< matrix.xcode-version >>
          matrix:
            parameters:
              xcode-version: [*default-xcode-version]
      - publish-pod-release:
          filters:
            branches: { only: master }
