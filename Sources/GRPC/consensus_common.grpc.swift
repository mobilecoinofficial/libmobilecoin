//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: consensus_common.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


//// Blockchain API shared between clients and peers.
///
/// Usage: instantiate `ConsensusCommon_BlockchainAPIClient`, then call methods of this protocol to make API calls.
public protocol ConsensusCommon_BlockchainAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: ConsensusCommon_BlockchainAPIClientInterceptorFactoryProtocol? { get }

  func getLastBlockInfo(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, ConsensusCommon_LastBlockInfoResponse>

  func getBlocks(
    _ request: ConsensusCommon_BlocksRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ConsensusCommon_BlocksRequest, ConsensusCommon_BlocksResponse>
}

extension ConsensusCommon_BlockchainAPIClientProtocol {
  public var serviceName: String {
    return "consensus_common.BlockchainAPI"
  }

  /// Unary call to GetLastBlockInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLastBlockInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLastBlockInfo(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, ConsensusCommon_LastBlockInfoResponse> {
    return self.makeUnaryCall(
      path: "/consensus_common.BlockchainAPI/GetLastBlockInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastBlockInfoInterceptors() ?? []
    )
  }

  /// Unary call to GetBlocks
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlocks.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getBlocks(
    _ request: ConsensusCommon_BlocksRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ConsensusCommon_BlocksRequest, ConsensusCommon_BlocksResponse> {
    return self.makeUnaryCall(
      path: "/consensus_common.BlockchainAPI/GetBlocks",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlocksInterceptors() ?? []
    )
  }
}

public protocol ConsensusCommon_BlockchainAPIClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getLastBlockInfo'.
  func makeGetLastBlockInfoInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, ConsensusCommon_LastBlockInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlocks'.
  func makeGetBlocksInterceptors() -> [ClientInterceptor<ConsensusCommon_BlocksRequest, ConsensusCommon_BlocksResponse>]
}

public final class ConsensusCommon_BlockchainAPIClient: ConsensusCommon_BlockchainAPIClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: ConsensusCommon_BlockchainAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the consensus_common.BlockchainAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ConsensusCommon_BlockchainAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

