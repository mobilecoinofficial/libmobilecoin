//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: mistyswap_onramp.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
#if canImport(LibMobileCoinCommon)
import LibMobileCoinCommon
#endif
import NIO
import SwiftProtobuf


/// Usage: instantiate `MistyswapOnramp_MistyswapOnrampApiClient`, then call methods of this protocol to make API calls.
public protocol MistyswapOnramp_MistyswapOnrampApiClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: MistyswapOnramp_MistyswapOnrampApiClientInterceptorFactoryProtocol? { get }

  func setupOnramp(
    _ request: Attest_Message,
    callOptions: CallOptions?
  ) -> UnaryCall<Attest_Message, Attest_Message>

  func forgetOnramp(
    _ request: Attest_Message,
    callOptions: CallOptions?
  ) -> UnaryCall<Attest_Message, Attest_Message>

  func getOnrampStatus(
    _ request: Attest_Message,
    callOptions: CallOptions?
  ) -> UnaryCall<Attest_Message, Attest_Message>

  func getOnrampDebugInfo(
    _ request: Attest_Message,
    callOptions: CallOptions?
  ) -> UnaryCall<Attest_Message, Attest_Message>
}

extension MistyswapOnramp_MistyswapOnrampApiClientProtocol {
  public var serviceName: String {
    return "mistyswap_onramp.MistyswapOnrampApi"
  }

  //// Setup onramping (or check if it is already setup).
  //// Input should be an encrypted SetupOnrampRequest, output is an encrypted SetupOnrampResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetupOnramp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setupOnramp(
    _ request: Attest_Message,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: "/mistyswap_onramp.MistyswapOnrampApi/SetupOnramp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetupOnrampInterceptors() ?? []
    )
  }

  //// Forget an onramp.
  //// Input should be an encrypted ForgetOnrampRequest, output is an encrypted ForgetOnrampResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to ForgetOnramp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func forgetOnramp(
    _ request: Attest_Message,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: "/mistyswap_onramp.MistyswapOnrampApi/ForgetOnramp",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeForgetOnrampInterceptors() ?? []
    )
  }

  //// Get the status of an onramp.
  //// Input should be an encrypted GetOnrampStatusRequest, output is an encrypted GetOnrampStatusResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOnrampStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOnrampStatus(
    _ request: Attest_Message,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: "/mistyswap_onramp.MistyswapOnrampApi/GetOnrampStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOnrampStatusInterceptors() ?? []
    )
  }

  //// Get debug info.
  //// Input should be an encrypted GetOnrampDebugInfoRequest, output is an encrypted GetOnrampDebugInfoResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOnrampDebugInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOnrampDebugInfo(
    _ request: Attest_Message,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: "/mistyswap_onramp.MistyswapOnrampApi/GetOnrampDebugInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOnrampDebugInfoInterceptors() ?? []
    )
  }
}

public protocol MistyswapOnramp_MistyswapOnrampApiClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'setupOnramp'.
  func makeSetupOnrampInterceptors() -> [ClientInterceptor<Attest_Message, Attest_Message>]

  /// - Returns: Interceptors to use when invoking 'forgetOnramp'.
  func makeForgetOnrampInterceptors() -> [ClientInterceptor<Attest_Message, Attest_Message>]

  /// - Returns: Interceptors to use when invoking 'getOnrampStatus'.
  func makeGetOnrampStatusInterceptors() -> [ClientInterceptor<Attest_Message, Attest_Message>]

  /// - Returns: Interceptors to use when invoking 'getOnrampDebugInfo'.
  func makeGetOnrampDebugInfoInterceptors() -> [ClientInterceptor<Attest_Message, Attest_Message>]
}

public final class MistyswapOnramp_MistyswapOnrampApiClient: MistyswapOnramp_MistyswapOnrampApiClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: MistyswapOnramp_MistyswapOnrampApiClientInterceptorFactoryProtocol?

  /// Creates a client for the mistyswap_onramp.MistyswapOnrampApi service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: MistyswapOnramp_MistyswapOnrampApiClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

