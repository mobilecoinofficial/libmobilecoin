// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mistyswap_onramp.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2018-2023 MobileCoin Inc.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

//// Various possible onramp error codes.
//// This should be kept in sync with mistyswap_onramp_api::Error
//// The ORC prefix is needed since enum variants have to be unique across all enums in the file.
public enum MistyswapOnramp_OnrampResultCode: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case orcInvalid // = 0
  case orcOk // = 1
  case orcTooManyOnramps // = 2
  case orcMixinCredentialsJson // = 3
  case orcCredentialsAlreadyInUse // = 4
  case orcMixin // = 5
  case orcOnrampNotFound // = 6
  case orcInvalidSrcAssetID // = 7
  case orcInvalidDstAssetID // = 8
  case orcInvalidWithdrawalAddress // = 9
  case orcInvalidMinWithdrawalAmount // = 10
  case orcInvalidMinSwapRate // = 11
  case UNRECOGNIZED(Int)

  public init() {
    self = .orcInvalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .orcInvalid
    case 1: self = .orcOk
    case 2: self = .orcTooManyOnramps
    case 3: self = .orcMixinCredentialsJson
    case 4: self = .orcCredentialsAlreadyInUse
    case 5: self = .orcMixin
    case 6: self = .orcOnrampNotFound
    case 7: self = .orcInvalidSrcAssetID
    case 8: self = .orcInvalidDstAssetID
    case 9: self = .orcInvalidWithdrawalAddress
    case 10: self = .orcInvalidMinWithdrawalAmount
    case 11: self = .orcInvalidMinSwapRate
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .orcInvalid: return 0
    case .orcOk: return 1
    case .orcTooManyOnramps: return 2
    case .orcMixinCredentialsJson: return 3
    case .orcCredentialsAlreadyInUse: return 4
    case .orcMixin: return 5
    case .orcOnrampNotFound: return 6
    case .orcInvalidSrcAssetID: return 7
    case .orcInvalidDstAssetID: return 8
    case .orcInvalidWithdrawalAddress: return 9
    case .orcInvalidMinWithdrawalAmount: return 10
    case .orcInvalidMinSwapRate: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension MistyswapOnramp_OnrampResultCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [MistyswapOnramp_OnrampResultCode] = [
    .orcInvalid,
    .orcOk,
    .orcTooManyOnramps,
    .orcMixinCredentialsJson,
    .orcCredentialsAlreadyInUse,
    .orcMixin,
    .orcOnrampNotFound,
    .orcInvalidSrcAssetID,
    .orcInvalidDstAssetID,
    .orcInvalidWithdrawalAddress,
    .orcInvalidMinWithdrawalAmount,
    .orcInvalidMinSwapRate,
  ]
}

#endif  // swift(>=4.2)

//// Current onramp state.
//// This should be kept in sync with onramp_impl::OnrampState
//// The OS prefix is needed since enum variants have to be unique across all enums in the file.
public enum MistyswapOnramp_OnrampState: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case osInvalid // = 0
  case osNotStarted // = 1
  case osPolling // = 2
  case osWaiting // = 3
  case osIntermittentError // = 4
  case osBlockedOnSwap // = 5
  case osBlockedOnWithdrawal // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .osInvalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .osInvalid
    case 1: self = .osNotStarted
    case 2: self = .osPolling
    case 3: self = .osWaiting
    case 4: self = .osIntermittentError
    case 5: self = .osBlockedOnSwap
    case 6: self = .osBlockedOnWithdrawal
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .osInvalid: return 0
    case .osNotStarted: return 1
    case .osPolling: return 2
    case .osWaiting: return 3
    case .osIntermittentError: return 4
    case .osBlockedOnSwap: return 5
    case .osBlockedOnWithdrawal: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension MistyswapOnramp_OnrampState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [MistyswapOnramp_OnrampState] = [
    .osInvalid,
    .osNotStarted,
    .osPolling,
    .osWaiting,
    .osIntermittentError,
    .osBlockedOnSwap,
    .osBlockedOnWithdrawal,
  ]
}

#endif  // swift(>=4.2)

//// A simplified GRPC-compatible wrapper for Result<_, mistyswap_onramp_api::Error>
public struct MistyswapOnramp_OnrampResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: MistyswapOnramp_OnrampResultCode = .orcInvalid

  public var message: String = String()

  /// For Credentials Already In Use, this is the onramp_id of the existing onramp.
  public var onrampID: Data = Data()

  /// For Invalid Src/Dst asset id, this is the asset id that was invalid.
  public var assetID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

//// Onramp parameters.
//// They are separated from the credentials since they are not as sensitive, and it makes it
//// easier to include them to the client in the response to GetOnrampStatus calls.
public struct MistyswapOnramp_OnrampParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The asset id we will be swapping into. This will be a MobileCoin token such as MOB or EUSD.
  public var dstAssetID: String = String()

  //// A map of Mixin asset UUID to minimum swap rate (as a decimal number). For example,
  //// if dst_asset_id is EUSD, and this map contains an entry (USDC, 0.95), and we receive 10 USDC,
  //// we will set the minimum amount received from the swap to 9.5 EUSD.
  //// This allows the client to control how much slippage it is willing to tolerate when performing swaps.
  public var srcAssetIDToMinSwapRate: Dictionary<String,String> = [:]

  //// The destination address to withdraw to after a successful swap.
  public var dstAddress: String = String()

  //// The minimum withdrawal amount (as a decimal number). We will only withdraw if our balance exceeds this value.
  //// This helps wasting fees on small withdrawals.
  public var minWithdrawalAmount: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

//// A request to setup an onramp.
public struct MistyswapOnramp_SetupOnrampRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Mixin credentials, as a JSON string.
  public var mixinCredentialsJson: String = String()

  //// Onramp parameters.
  public var params: MistyswapOnramp_OnrampParams {
    get {return _params ?? MistyswapOnramp_OnrampParams()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _params: MistyswapOnramp_OnrampParams? = nil
}

//// A successful response to an SetupOnrampRequest.
public struct MistyswapOnramp_SetupOnrampResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Result of the onramp request.
  public var result: MistyswapOnramp_OnrampResult {
    get {return _result ?? MistyswapOnramp_OnrampResult()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  //// Unique ID derived from the onramp request (set if result code is Ok)
  public var onrampID: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: MistyswapOnramp_OnrampResult? = nil
}

//// A request to forget an onramp.
public struct MistyswapOnramp_ForgetOnrampRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Unique ID of the onramp to forget.
  public var onrampID: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

//// A response to a ForgetOnrampRequest.
public struct MistyswapOnramp_ForgetOnrampResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Result of the onramp request.
  public var result: MistyswapOnramp_OnrampResult {
    get {return _result ?? MistyswapOnramp_OnrampResult()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: MistyswapOnramp_OnrampResult? = nil
}

//// Details about a previously-initiated onramp.
public struct MistyswapOnramp_Onramp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The original onramp parameters.
  public var params: MistyswapOnramp_OnrampParams {
    get {return _storage._params ?? MistyswapOnramp_OnrampParams()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {_uniqueStorage()._params = nil}

  //// Current state of the onramp.
  public var state: MistyswapOnramp_OnrampState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  //// String details, if any, about the current state.
  public var stateDetails: String {
    get {return _storage._stateDetails}
    set {_uniqueStorage()._stateDetails = newValue}
  }

  //// The Mixin withdrawal address as a JSON blob.
  public var mixinWithdrawalAddressJson: String {
    get {return _storage._mixinWithdrawalAddressJson}
    set {_uniqueStorage()._mixinWithdrawalAddressJson = newValue}
  }

  //// Ongoing swap info, if any.
  public var ongoingSwap: MistyswapCommon_OngoingSwap {
    get {return _storage._ongoingSwap ?? MistyswapCommon_OngoingSwap()}
    set {_uniqueStorage()._ongoingSwap = newValue}
  }
  /// Returns true if `ongoingSwap` has been explicitly set.
  public var hasOngoingSwap: Bool {return _storage._ongoingSwap != nil}
  /// Clears the value of `ongoingSwap`. Subsequent reads from it will return its default value.
  public mutating func clearOngoingSwap() {_uniqueStorage()._ongoingSwap = nil}

  //// Ongoing withdrawal info, if any. This is a Mixin snapshot JSON blob.
  public var ongoingWithdrawalJson: String {
    get {return _storage._ongoingWithdrawalJson}
    set {_uniqueStorage()._ongoingWithdrawalJson = newValue}
  }

  //// Balances (map of Mixin asset UUID to balance as a decimal number).
  public var balances: Dictionary<String,String> {
    get {return _storage._balances}
    set {_uniqueStorage()._balances = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

//// Get the status of an onramp.
public struct MistyswapOnramp_GetOnrampStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Unique ID of the onramp to get the status of.
  public var onrampID: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

//// A response to a GetOnrampStatusRequest.
public struct MistyswapOnramp_GetOnrampStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Result of the onramp request.
  public var result: MistyswapOnramp_OnrampResult {
    get {return _result ?? MistyswapOnramp_OnrampResult()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  //// The onramp status, if the result code is Ok.
  public var onramp: MistyswapOnramp_Onramp {
    get {return _onramp ?? MistyswapOnramp_Onramp()}
    set {_onramp = newValue}
  }
  /// Returns true if `onramp` has been explicitly set.
  public var hasOnramp: Bool {return self._onramp != nil}
  /// Clears the value of `onramp`. Subsequent reads from it will return its default value.
  public mutating func clearOnramp() {self._onramp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: MistyswapOnramp_OnrampResult? = nil
  fileprivate var _onramp: MistyswapOnramp_Onramp? = nil
}

//// Get the state transitions of a given onramp (for debug purposes).
public struct MistyswapOnramp_GetOnrampDebugInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Unique ID of the onramp to get the status of.
  public var onrampID: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

//// A response to a GetOnrampDebugInfoRequest.
public struct MistyswapOnramp_GetOnrampDebugInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Result of the onramp request.
  public var result: MistyswapOnramp_OnrampResult {
    get {return _result ?? MistyswapOnramp_OnrampResult()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  //// Debug info, encoded as a JSON blob.
  //// The schema is defined by the OnrampDebugInfo Rust struct and serialized by serde.
  public var debugInfoJson: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: MistyswapOnramp_OnrampResult? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension MistyswapOnramp_OnrampResultCode: @unchecked Sendable {}
extension MistyswapOnramp_OnrampState: @unchecked Sendable {}
extension MistyswapOnramp_OnrampResult: @unchecked Sendable {}
extension MistyswapOnramp_OnrampParams: @unchecked Sendable {}
extension MistyswapOnramp_SetupOnrampRequest: @unchecked Sendable {}
extension MistyswapOnramp_SetupOnrampResponse: @unchecked Sendable {}
extension MistyswapOnramp_ForgetOnrampRequest: @unchecked Sendable {}
extension MistyswapOnramp_ForgetOnrampResponse: @unchecked Sendable {}
extension MistyswapOnramp_Onramp: @unchecked Sendable {}
extension MistyswapOnramp_GetOnrampStatusRequest: @unchecked Sendable {}
extension MistyswapOnramp_GetOnrampStatusResponse: @unchecked Sendable {}
extension MistyswapOnramp_GetOnrampDebugInfoRequest: @unchecked Sendable {}
extension MistyswapOnramp_GetOnrampDebugInfoResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "mistyswap_onramp"

extension MistyswapOnramp_OnrampResultCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORC_INVALID"),
    1: .same(proto: "ORC_OK"),
    2: .same(proto: "ORC_TOO_MANY_ONRAMPS"),
    3: .same(proto: "ORC_MIXIN_CREDENTIALS_JSON"),
    4: .same(proto: "ORC_CREDENTIALS_ALREADY_IN_USE"),
    5: .same(proto: "ORC_MIXIN"),
    6: .same(proto: "ORC_ONRAMP_NOT_FOUND"),
    7: .same(proto: "ORC_INVALID_SRC_ASSET_ID"),
    8: .same(proto: "ORC_INVALID_DST_ASSET_ID"),
    9: .same(proto: "ORC_INVALID_WITHDRAWAL_ADDRESS"),
    10: .same(proto: "ORC_INVALID_MIN_WITHDRAWAL_AMOUNT"),
    11: .same(proto: "ORC_INVALID_MIN_SWAP_RATE"),
  ]
}

extension MistyswapOnramp_OnrampState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OS_INVALID"),
    1: .same(proto: "OS_NOT_STARTED"),
    2: .same(proto: "OS_POLLING"),
    3: .same(proto: "OS_WAITING"),
    4: .same(proto: "OS_INTERMITTENT_ERROR"),
    5: .same(proto: "OS_BLOCKED_ON_SWAP"),
    6: .same(proto: "OS_BLOCKED_ON_WITHDRAWAL"),
  ]
}

extension MistyswapOnramp_OnrampResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OnrampResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
    3: .standard(proto: "onramp_id"),
    4: .standard(proto: "asset_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.onrampID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.assetID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .orcInvalid {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if !self.onrampID.isEmpty {
      try visitor.visitSingularBytesField(value: self.onrampID, fieldNumber: 3)
    }
    if !self.assetID.isEmpty {
      try visitor.visitSingularStringField(value: self.assetID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_OnrampResult, rhs: MistyswapOnramp_OnrampResult) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.onrampID != rhs.onrampID {return false}
    if lhs.assetID != rhs.assetID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MistyswapOnramp_OnrampParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OnrampParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dst_asset_id"),
    2: .standard(proto: "src_asset_id_to_min_swap_rate"),
    3: .standard(proto: "dst_address"),
    4: .standard(proto: "min_withdrawal_amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.dstAssetID) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.srcAssetIDToMinSwapRate) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.dstAddress) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.minWithdrawalAmount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dstAssetID.isEmpty {
      try visitor.visitSingularStringField(value: self.dstAssetID, fieldNumber: 1)
    }
    if !self.srcAssetIDToMinSwapRate.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.srcAssetIDToMinSwapRate, fieldNumber: 2)
    }
    if !self.dstAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.dstAddress, fieldNumber: 3)
    }
    if !self.minWithdrawalAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.minWithdrawalAmount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_OnrampParams, rhs: MistyswapOnramp_OnrampParams) -> Bool {
    if lhs.dstAssetID != rhs.dstAssetID {return false}
    if lhs.srcAssetIDToMinSwapRate != rhs.srcAssetIDToMinSwapRate {return false}
    if lhs.dstAddress != rhs.dstAddress {return false}
    if lhs.minWithdrawalAmount != rhs.minWithdrawalAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MistyswapOnramp_SetupOnrampRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetupOnrampRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mixin_credentials_json"),
    2: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mixinCredentialsJson) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.mixinCredentialsJson.isEmpty {
      try visitor.visitSingularStringField(value: self.mixinCredentialsJson, fieldNumber: 1)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_SetupOnrampRequest, rhs: MistyswapOnramp_SetupOnrampRequest) -> Bool {
    if lhs.mixinCredentialsJson != rhs.mixinCredentialsJson {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MistyswapOnramp_SetupOnrampResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetupOnrampResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "onramp_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.onrampID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.onrampID.isEmpty {
      try visitor.visitSingularBytesField(value: self.onrampID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_SetupOnrampResponse, rhs: MistyswapOnramp_SetupOnrampResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.onrampID != rhs.onrampID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MistyswapOnramp_ForgetOnrampRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ForgetOnrampRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "onramp_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.onrampID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.onrampID.isEmpty {
      try visitor.visitSingularBytesField(value: self.onrampID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_ForgetOnrampRequest, rhs: MistyswapOnramp_ForgetOnrampRequest) -> Bool {
    if lhs.onrampID != rhs.onrampID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MistyswapOnramp_ForgetOnrampResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ForgetOnrampResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_ForgetOnrampResponse, rhs: MistyswapOnramp_ForgetOnrampResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MistyswapOnramp_Onramp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Onramp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "state"),
    3: .standard(proto: "state_details"),
    4: .standard(proto: "mixin_withdrawal_address_json"),
    5: .standard(proto: "ongoing_swap"),
    6: .standard(proto: "ongoing_withdrawal_json"),
    7: .same(proto: "balances"),
  ]

  fileprivate class _StorageClass {
    var _params: MistyswapOnramp_OnrampParams? = nil
    var _state: MistyswapOnramp_OnrampState = .osInvalid
    var _stateDetails: String = String()
    var _mixinWithdrawalAddressJson: String = String()
    var _ongoingSwap: MistyswapCommon_OngoingSwap? = nil
    var _ongoingWithdrawalJson: String = String()
    var _balances: Dictionary<String,String> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _params = source._params
      _state = source._state
      _stateDetails = source._stateDetails
      _mixinWithdrawalAddressJson = source._mixinWithdrawalAddressJson
      _ongoingSwap = source._ongoingSwap
      _ongoingWithdrawalJson = source._ongoingWithdrawalJson
      _balances = source._balances
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._state) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._stateDetails) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._mixinWithdrawalAddressJson) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._ongoingSwap) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._ongoingWithdrawalJson) }()
        case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._balances) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if _storage._state != .osInvalid {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 2)
      }
      if !_storage._stateDetails.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stateDetails, fieldNumber: 3)
      }
      if !_storage._mixinWithdrawalAddressJson.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mixinWithdrawalAddressJson, fieldNumber: 4)
      }
      try { if let v = _storage._ongoingSwap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._ongoingWithdrawalJson.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ongoingWithdrawalJson, fieldNumber: 6)
      }
      if !_storage._balances.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._balances, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_Onramp, rhs: MistyswapOnramp_Onramp) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._params != rhs_storage._params {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._stateDetails != rhs_storage._stateDetails {return false}
        if _storage._mixinWithdrawalAddressJson != rhs_storage._mixinWithdrawalAddressJson {return false}
        if _storage._ongoingSwap != rhs_storage._ongoingSwap {return false}
        if _storage._ongoingWithdrawalJson != rhs_storage._ongoingWithdrawalJson {return false}
        if _storage._balances != rhs_storage._balances {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MistyswapOnramp_GetOnrampStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOnrampStatusRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "onramp_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.onrampID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.onrampID.isEmpty {
      try visitor.visitSingularBytesField(value: self.onrampID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_GetOnrampStatusRequest, rhs: MistyswapOnramp_GetOnrampStatusRequest) -> Bool {
    if lhs.onrampID != rhs.onrampID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MistyswapOnramp_GetOnrampStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOnrampStatusResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "onramp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._onramp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._onramp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_GetOnrampStatusResponse, rhs: MistyswapOnramp_GetOnrampStatusResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs._onramp != rhs._onramp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MistyswapOnramp_GetOnrampDebugInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOnrampDebugInfoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "onramp_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.onrampID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.onrampID.isEmpty {
      try visitor.visitSingularBytesField(value: self.onrampID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_GetOnrampDebugInfoRequest, rhs: MistyswapOnramp_GetOnrampDebugInfoRequest) -> Bool {
    if lhs.onrampID != rhs.onrampID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MistyswapOnramp_GetOnrampDebugInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOnrampDebugInfoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "debug_info_json"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.debugInfoJson) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.debugInfoJson.isEmpty {
      try visitor.visitSingularStringField(value: self.debugInfoJson, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MistyswapOnramp_GetOnrampDebugInfoResponse, rhs: MistyswapOnramp_GetOnrampDebugInfoResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.debugInfoJson != rhs.debugInfoJson {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
