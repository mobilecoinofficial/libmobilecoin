//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: mistyswap_onramp.proto
//

//
// Copyright 2023, MobileCoin Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#if canImport(LibMobileCoinCommon)
import LibMobileCoinCommon
#endif
#if canImport(SwiftProtobuf)
import SwiftProtobuf
#endif


/// Usage: instantiate `MistyswapOnramp_MistyswapOnrampApiRestClient`, then call methods of this protocol to make API calls.
public protocol MistyswapOnramp_MistyswapOnrampApiRestClientProtocol: HTTPClient {
  var serviceName: String { get }

  func setupOnramp(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions?
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message>

  func forgetOnramp(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions?
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message>

  func getOnrampStatus(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions?
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message>

  func getOnrampDebugInfo(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions?
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message>
}

extension MistyswapOnramp_MistyswapOnrampApiRestClientProtocol {
  public var serviceName: String {
    return "mistyswap_onramp.MistyswapOnrampApi"
  }

  //// Setup onramping (or check if it is already setup).
  //// Input should be an encrypted SetupOnrampRequest, output is an encrypted SetupOnrampResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetupOnramp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setupOnramp(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions? = nil
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: MistyswapOnramp_MistyswapOnrampApiClientMetadata.Methods.setupOnramp.path,
      request: request,
      callOptions: callOptions ?? self.defaultHTTPCallOptions
    )
  }

  //// Forget an onramp.
  //// Input should be an encrypted ForgetOnrampRequest, output is an encrypted ForgetOnrampResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to ForgetOnramp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func forgetOnramp(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions? = nil
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: MistyswapOnramp_MistyswapOnrampApiClientMetadata.Methods.forgetOnramp.path,
      request: request,
      callOptions: callOptions ?? self.defaultHTTPCallOptions
    )
  }

  //// Get the status of an onramp.
  //// Input should be an encrypted GetOnrampStatusRequest, output is an encrypted GetOnrampStatusResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOnrampStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOnrampStatus(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions? = nil
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: MistyswapOnramp_MistyswapOnrampApiClientMetadata.Methods.getOnrampStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultHTTPCallOptions
    )
  }

  //// Get debug info.
  //// Input should be an encrypted GetOnrampDebugInfoRequest, output is an encrypted GetOnrampDebugInfoResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOnrampDebugInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOnrampDebugInfo(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions? = nil
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: MistyswapOnramp_MistyswapOnrampApiClientMetadata.Methods.getOnrampDebugInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultHTTPCallOptions
    )
  }
}

public final class MistyswapOnramp_MistyswapOnrampApiRestClient: MistyswapOnramp_MistyswapOnrampApiRestClientProtocol {
  public var defaultHTTPCallOptions: HTTPCallOptions

  /// Creates a client for the mistyswap_onramp.MistyswapOnrampApi service.
  ///
  /// - Parameters:
  ///   - defaultHTTPCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(
    defaultHTTPCallOptions: HTTPCallOptions = HTTPCallOptions()
  ) {
    self.defaultHTTPCallOptions = defaultHTTPCallOptions
  }
}

public enum MistyswapOnramp_MistyswapOnrampApiClientMetadata {
  public static let serviceDescriptor = HTTPServiceDescriptor(
    name: "MistyswapOnrampApi",
    fullName: "mistyswap_onramp.MistyswapOnrampApi",
    methods: [
      MistyswapOnramp_MistyswapOnrampApiClientMetadata.Methods.setupOnramp,
      MistyswapOnramp_MistyswapOnrampApiClientMetadata.Methods.forgetOnramp,
      MistyswapOnramp_MistyswapOnrampApiClientMetadata.Methods.getOnrampStatus,
      MistyswapOnramp_MistyswapOnrampApiClientMetadata.Methods.getOnrampDebugInfo,
    ]
  )

  public enum Methods {
    public static let setupOnramp = HTTPMethodDescriptor(
      name: "SetupOnramp",
      path: "/mistyswap_onramp.MistyswapOnrampApi/SetupOnramp",
      type: HTTPCallType.unary
    )

    public static let forgetOnramp = HTTPMethodDescriptor(
      name: "ForgetOnramp",
      path: "/mistyswap_onramp.MistyswapOnrampApi/ForgetOnramp",
      type: HTTPCallType.unary
    )

    public static let getOnrampStatus = HTTPMethodDescriptor(
      name: "GetOnrampStatus",
      path: "/mistyswap_onramp.MistyswapOnrampApi/GetOnrampStatus",
      type: HTTPCallType.unary
    )

    public static let getOnrampDebugInfo = HTTPMethodDescriptor(
      name: "GetOnrampDebugInfo",
      path: "/mistyswap_onramp.MistyswapOnrampApi/GetOnrampDebugInfo",
      type: HTTPCallType.unary
    )
  }
}

