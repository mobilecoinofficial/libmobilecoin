// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ingest_common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2018-2021 The MobileCoin Foundation

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

//// Represents the possible modes of an ingest server controller
public enum IngestCommon_IngestControllerMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  //// Server is not actively consuming and scanning the blockchain
  case idle // = 0

  //// Server is actively consuming and scanning the blockchain,
  //// and attempting to publish fog reports, unless DB says the key is retired.
  case active // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .idle
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .idle
    case 1: self = .active
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .idle: return 0
    case .active: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension IngestCommon_IngestControllerMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [IngestCommon_IngestControllerMode] = [
    .idle,
    .active,
  ]
}

#endif  // swift(>=4.2)

//// A summary of the state of the ingest server
public struct IngestCommon_IngestSummary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The current mode of the server
  public var mode: IngestCommon_IngestControllerMode = .idle

  //// The next block index that will scanned
  public var nextBlockIndex: UInt64 = 0

  //// The pubkey expiry window value, used to compute pubkey_expiry values in reports.
  //// This is how many more blocks we commit to scanning with this key.
  //// (If we don't scan that many blocks, then the ones we didn't scan are "missed blocks".)
  public var pubkeyExpiryWindow: UInt64 = 0

  //// The ingress public key of the server
  public var ingressPubkey: External_CompressedRistretto {
    get {return _ingressPubkey ?? External_CompressedRistretto()}
    set {_ingressPubkey = newValue}
  }
  /// Returns true if `ingressPubkey` has been explicitly set.
  public var hasIngressPubkey: Bool {return self._ingressPubkey != nil}
  /// Clears the value of `ingressPubkey`. Subsequent reads from it will return its default value.
  public mutating func clearIngressPubkey() {self._ingressPubkey = nil}

  //// The egress public key of the server (appearing in RngRecord objects)
  public var egressPubkey: Data = Data()

  //// The kex rng version of the server (appearing in RngRecord objects)
  public var kexRngVersion: UInt32 = 0

  //// The list of peers of this server. The list contains igp:// URIs
  public var peers: [String] = []

  //// The current ingest invocation id of this server (only if Active)
  public var ingestInvocationID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ingressPubkey: External_CompressedRistretto? = nil
}

//// The schema of the ingest server's state file that it backs up on disk
public struct IngestCommon_IngestStateFile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The summary of the ingest server state
  public var summary: IngestCommon_IngestSummary {
    get {return _summary ?? IngestCommon_IngestSummary()}
    set {_summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return self._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  public mutating func clearSummary() {self._summary = nil}

  //// Sealed ingress key blob.
  //// In a well-formed state file, the private key sealed here matches the ingress_pubkey in the summary.
  public var sealedIngressKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _summary: IngestCommon_IngestSummary? = nil
}

//// A request to change the list of peers of an ingest server
public struct IngestCommon_SetPeersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// The new list of peer uris
  public var ingestPeerUris: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ingest_common"

extension IngestCommon_IngestControllerMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Idle"),
    1: .same(proto: "Active"),
  ]
}

extension IngestCommon_IngestSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IngestSummary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
    2: .standard(proto: "next_block_index"),
    3: .standard(proto: "pubkey_expiry_window"),
    4: .standard(proto: "ingress_pubkey"),
    5: .standard(proto: "egress_pubkey"),
    6: .standard(proto: "kex_rng_version"),
    7: .same(proto: "peers"),
    8: .standard(proto: "ingest_invocation_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.nextBlockIndex) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.pubkeyExpiryWindow) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ingressPubkey) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.egressPubkey) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.kexRngVersion) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.peers) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.ingestInvocationID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mode != .idle {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 1)
    }
    if self.nextBlockIndex != 0 {
      try visitor.visitSingularUInt64Field(value: self.nextBlockIndex, fieldNumber: 2)
    }
    if self.pubkeyExpiryWindow != 0 {
      try visitor.visitSingularUInt64Field(value: self.pubkeyExpiryWindow, fieldNumber: 3)
    }
    if let v = self._ingressPubkey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.egressPubkey.isEmpty {
      try visitor.visitSingularBytesField(value: self.egressPubkey, fieldNumber: 5)
    }
    if self.kexRngVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.kexRngVersion, fieldNumber: 6)
    }
    if !self.peers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.peers, fieldNumber: 7)
    }
    if self.ingestInvocationID != 0 {
      try visitor.visitSingularInt64Field(value: self.ingestInvocationID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: IngestCommon_IngestSummary, rhs: IngestCommon_IngestSummary) -> Bool {
    if lhs.mode != rhs.mode {return false}
    if lhs.nextBlockIndex != rhs.nextBlockIndex {return false}
    if lhs.pubkeyExpiryWindow != rhs.pubkeyExpiryWindow {return false}
    if lhs._ingressPubkey != rhs._ingressPubkey {return false}
    if lhs.egressPubkey != rhs.egressPubkey {return false}
    if lhs.kexRngVersion != rhs.kexRngVersion {return false}
    if lhs.peers != rhs.peers {return false}
    if lhs.ingestInvocationID != rhs.ingestInvocationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IngestCommon_IngestStateFile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IngestStateFile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "summary"),
    2: .standard(proto: "sealed_ingress_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._summary) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.sealedIngressKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._summary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.sealedIngressKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.sealedIngressKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: IngestCommon_IngestStateFile, rhs: IngestCommon_IngestStateFile) -> Bool {
    if lhs._summary != rhs._summary {return false}
    if lhs.sealedIngressKey != rhs.sealedIngressKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IngestCommon_SetPeersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetPeersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ingest_peer_uris"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ingestPeerUris) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ingestPeerUris.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ingestPeerUris, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: IngestCommon_SetPeersRequest, rhs: IngestCommon_SetPeersRequest) -> Bool {
    if lhs.ingestPeerUris != rhs.ingestPeerUris {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
