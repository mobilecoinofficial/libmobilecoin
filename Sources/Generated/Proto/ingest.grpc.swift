//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ingest.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `AccountIngest_AccountIngestAPIClient`, then call methods of this protocol to make API calls.
public protocol AccountIngest_AccountIngestAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: AccountIngest_AccountIngestAPIClientInterceptorFactoryProtocol? { get }

  func getStatus(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary>

  func newKeys(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary>

  func setPubkeyExpiryWindow(
    _ request: AccountIngest_SetPubkeyExpiryWindowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<AccountIngest_SetPubkeyExpiryWindowRequest, IngestCommon_IngestSummary>

  func setPeers(
    _ request: IngestCommon_SetPeersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<IngestCommon_SetPeersRequest, IngestCommon_IngestSummary>

  func activate(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary>

  func retire(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary>

  func unretire(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary>

  func reportMissedBlockRange(
    _ request: AccountIngest_ReportMissedBlockRangeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<AccountIngest_ReportMissedBlockRangeRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getMissedBlockRanges(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, AccountIngest_GetMissedBlockRangesResponse>
}

extension AccountIngest_AccountIngestAPIClientProtocol {
  public var serviceName: String {
    return "account_ingest.AccountIngestAPI"
  }

  //// Get a summary of the state of this ingest server
  ///
  /// - Parameters:
  ///   - request: Request to send to GetStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getStatus(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary> {
    return self.makeUnaryCall(
      path: "/account_ingest.AccountIngestAPI/GetStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetStatusInterceptors() ?? []
    )
  }

  //// Wipe out all keys and oram state in the enclave, replacing them with new random keys.
  //// This places the enclave in a similar state to if it was just initialized.
  //// This also decommissions any existing ingest invocation id.
  //// It is an error to do this if the server is not idle.
  ///
  /// - Parameters:
  ///   - request: Request to send to NewKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func newKeys(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary> {
    return self.makeUnaryCall(
      path: "/account_ingest.AccountIngestAPI/NewKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewKeysInterceptors() ?? []
    )
  }

  //// Set the pubkey_expiry_window of this ingest server.
  //// It is an error to reduce this value if the server is not idle.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPubkeyExpiryWindow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setPubkeyExpiryWindow(
    _ request: AccountIngest_SetPubkeyExpiryWindowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<AccountIngest_SetPubkeyExpiryWindowRequest, IngestCommon_IngestSummary> {
    return self.makeUnaryCall(
      path: "/account_ingest.AccountIngestAPI/SetPubkeyExpiryWindow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPubkeyExpiryWindowInterceptors() ?? []
    )
  }

  //// Set the list of peers of this ingest server
  //// Returns the status after the operation, or, an error
  //// Duplicates in this list are removed, and if a Uri has the same responder id as
  //// the target server, that Uri is removed and it is not an error.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPeers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setPeers(
    _ request: IngestCommon_SetPeersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<IngestCommon_SetPeersRequest, IngestCommon_IngestSummary> {
    return self.makeUnaryCall(
      path: "/account_ingest.AccountIngestAPI/SetPeers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPeersInterceptors() ?? []
    )
  }

  //// Attempt to put an idle server in the active mode.
  //// This is a no-op if the server is already active, and cancels retiry if the server is retiring.
  ////
  //// This will:
  //// - Check state of every peer. If any is active or retiring, fail this operation.
  ////   Also, set their peer list to match ours, including this node.
  //// - Send our ingress private key to every peer, and confirm success.
  //// - Create a new ingest invocation id with the database and start consuming blocks and publishing fog reports.
  ///
  /// - Parameters:
  ///   - request: Request to send to Activate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func activate(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary> {
    return self.makeUnaryCall(
      path: "/account_ingest.AccountIngestAPI/Activate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateInterceptors() ?? []
    )
  }

  //// Attempt to put an active server in the retiring mode, after which it will eventually become idle.
  //// This is a no-op if the server is already idling or retiring.
  ////
  //// This will:
  //// - Compute a block at which retiry is finished, which will be the last pubkey_expiry value plus one.
  //// - Cause the server to stop publishing fog reports with every block.
  //// - After the final block is processed, enter the idle state. (TODO: Also overwrite private keys? and decommission ingest invocation?)
  ///
  /// - Parameters:
  ///   - request: Request to send to Retire.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func retire(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary> {
    return self.makeUnaryCall(
      path: "/account_ingest.AccountIngestAPI/Retire",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRetireInterceptors() ?? []
    )
  }

  //// Attempt to take the cluster (identified by the current ingress key on this ingest server) out of retirement.
  //// The use case for this is:
  //// 1. We are trying to do ingest enclave upgrade
  //// 2. We retire the old cluster and activate the new cluster
  //// 3. Something goes wrong and the new cluster goes up in flames
  //// 4. We want to unretire the old cluster key so that the old cluster starts publishing fog reports
  ////    again and continues life as usual, and then continue debugging the new cluster and try again later.
  ///
  /// - Parameters:
  ///   - request: Request to send to Unretire.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func unretire(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary> {
    return self.makeUnaryCall(
      path: "/account_ingest.AccountIngestAPI/Unretire",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnretireInterceptors() ?? []
    )
  }

  //// Report a range of missed blocks.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReportMissedBlockRange.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func reportMissedBlockRange(
    _ request: AccountIngest_ReportMissedBlockRangeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<AccountIngest_ReportMissedBlockRangeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/account_ingest.AccountIngestAPI/ReportMissedBlockRange",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReportMissedBlockRangeInterceptors() ?? []
    )
  }

  //// Get list of missed block ranges.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMissedBlockRanges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getMissedBlockRanges(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, AccountIngest_GetMissedBlockRangesResponse> {
    return self.makeUnaryCall(
      path: "/account_ingest.AccountIngestAPI/GetMissedBlockRanges",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMissedBlockRangesInterceptors() ?? []
    )
  }
}

public protocol AccountIngest_AccountIngestAPIClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getStatus'.
  func makeGetStatusInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary>]

  /// - Returns: Interceptors to use when invoking 'newKeys'.
  func makeNewKeysInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary>]

  /// - Returns: Interceptors to use when invoking 'setPubkeyExpiryWindow'.
  func makeSetPubkeyExpiryWindowInterceptors() -> [ClientInterceptor<AccountIngest_SetPubkeyExpiryWindowRequest, IngestCommon_IngestSummary>]

  /// - Returns: Interceptors to use when invoking 'setPeers'.
  func makeSetPeersInterceptors() -> [ClientInterceptor<IngestCommon_SetPeersRequest, IngestCommon_IngestSummary>]

  /// - Returns: Interceptors to use when invoking 'activate'.
  func makeActivateInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary>]

  /// - Returns: Interceptors to use when invoking 'retire'.
  func makeRetireInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary>]

  /// - Returns: Interceptors to use when invoking 'unretire'.
  func makeUnretireInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, IngestCommon_IngestSummary>]

  /// - Returns: Interceptors to use when invoking 'reportMissedBlockRange'.
  func makeReportMissedBlockRangeInterceptors() -> [ClientInterceptor<AccountIngest_ReportMissedBlockRangeRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getMissedBlockRanges'.
  func makeGetMissedBlockRangesInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, AccountIngest_GetMissedBlockRangesResponse>]
}

public final class AccountIngest_AccountIngestAPIClient: AccountIngest_AccountIngestAPIClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: AccountIngest_AccountIngestAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the account_ingest.AccountIngestAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AccountIngest_AccountIngestAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

