//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: consensus_client.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `ConsensusClient_ConsensusClientAPIClient`, then call methods of this protocol to make API calls.
public protocol ConsensusClient_ConsensusClientAPIClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: ConsensusClient_ConsensusClientAPIClientInterceptorFactoryProtocol? { get }

  func clientTxPropose(
    _ request: Attest_Message,
    callOptions: CallOptions?
  ) -> UnaryCall<Attest_Message, ConsensusCommon_ProposeTxResponse>

  func proposeMintConfigTx(
    _ request: External_MintConfigTx,
    callOptions: CallOptions?
  ) -> UnaryCall<External_MintConfigTx, ConsensusClient_ProposeMintConfigTxResponse>

  func proposeMintTx(
    _ request: External_MintTx,
    callOptions: CallOptions?
  ) -> UnaryCall<External_MintTx, ConsensusClient_ProposeMintTxResponse>

  func getNodeConfig(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, ConsensusConfig_ConsensusNodeConfig>
}

extension ConsensusClient_ConsensusClientAPIClientProtocol {
  public var serviceName: String {
    return "consensus_client.ConsensusClientAPI"
  }

  //// This API call is made with an encrypted payload for the enclave,
  //// indicating a new value to be acted upon.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClientTxPropose.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func clientTxPropose(
    _ request: Attest_Message,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Attest_Message, ConsensusCommon_ProposeTxResponse> {
    return self.makeUnaryCall(
      path: "/consensus_client.ConsensusClientAPI/ClientTxPropose",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientTxProposeInterceptors() ?? []
    )
  }

  //// Propose a new MintConfigTx.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProposeMintConfigTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func proposeMintConfigTx(
    _ request: External_MintConfigTx,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<External_MintConfigTx, ConsensusClient_ProposeMintConfigTxResponse> {
    return self.makeUnaryCall(
      path: "/consensus_client.ConsensusClientAPI/ProposeMintConfigTx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposeMintConfigTxInterceptors() ?? []
    )
  }

  //// Propose a new MintTx.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProposeMintTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func proposeMintTx(
    _ request: External_MintTx,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<External_MintTx, ConsensusClient_ProposeMintTxResponse> {
    return self.makeUnaryCall(
      path: "/consensus_client.ConsensusClientAPI/ProposeMintTx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposeMintTxInterceptors() ?? []
    )
  }

  //// Get current node configuration.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNodeConfig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNodeConfig(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, ConsensusConfig_ConsensusNodeConfig> {
    return self.makeUnaryCall(
      path: "/consensus_client.ConsensusClientAPI/GetNodeConfig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetNodeConfigInterceptors() ?? []
    )
  }
}

public protocol ConsensusClient_ConsensusClientAPIClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'clientTxPropose'.
  func makeClientTxProposeInterceptors() -> [ClientInterceptor<Attest_Message, ConsensusCommon_ProposeTxResponse>]

  /// - Returns: Interceptors to use when invoking 'proposeMintConfigTx'.
  func makeProposeMintConfigTxInterceptors() -> [ClientInterceptor<External_MintConfigTx, ConsensusClient_ProposeMintConfigTxResponse>]

  /// - Returns: Interceptors to use when invoking 'proposeMintTx'.
  func makeProposeMintTxInterceptors() -> [ClientInterceptor<External_MintTx, ConsensusClient_ProposeMintTxResponse>]

  /// - Returns: Interceptors to use when invoking 'getNodeConfig'.
  func makeGetNodeConfigInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, ConsensusConfig_ConsensusNodeConfig>]
}

public final class ConsensusClient_ConsensusClientAPIClient: ConsensusClient_ConsensusClientAPIClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: ConsensusClient_ConsensusClientAPIClientInterceptorFactoryProtocol?

  /// Creates a client for the consensus_client.ConsensusClientAPI service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ConsensusClient_ConsensusClientAPIClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

