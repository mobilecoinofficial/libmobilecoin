//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: mistyswap_offramp.proto
//

//
// Copyright 2023, MobileCoin Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#if canImport(SwiftProtobuf)
import SwiftProtobuf
#endif


/// Usage: instantiate `Mistyswap_MistyswapOfframpApiRestClient`, then call methods of this protocol to make API calls.
public protocol Mistyswap_MistyswapOfframpApiRestClientProtocol: HTTPClient {
  var serviceName: String { get }

  func initiateOfframp(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions?
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message>

  func forgetOfframp(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions?
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message>

  func getOfframpStatus(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions?
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message>

  func getOfframpDebugInfo(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions?
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message>
}

extension Mistyswap_MistyswapOfframpApiRestClientProtocol {
  public var serviceName: String {
    return "mistyswap.MistyswapOfframpApi"
  }

  //// Initiate (or pick up a previously initiated) offramp.
  //// Input should be an encrypted InitiateOfframpRequest, output is an encrypted InitiateOfframpResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to InitiateOfframp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func initiateOfframp(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions? = nil
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: Mistyswap_MistyswapOfframpApiClientMetadata.Methods.initiateOfframp.path,
      request: request,
      callOptions: callOptions ?? self.defaultHTTPCallOptions
    )
  }

  //// Forget an offramp.
  //// Input should be an encrypted ForgetOfframpRequest, output is an encrypted ForgetOfframpResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to ForgetOfframp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func forgetOfframp(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions? = nil
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: Mistyswap_MistyswapOfframpApiClientMetadata.Methods.forgetOfframp.path,
      request: request,
      callOptions: callOptions ?? self.defaultHTTPCallOptions
    )
  }

  //// Get the status of an offramp.
  //// Input should be an encrypted GetOfframpStatusRequest, output is an encrypted GetOfframpStatusResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOfframpStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOfframpStatus(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions? = nil
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: Mistyswap_MistyswapOfframpApiClientMetadata.Methods.getOfframpStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultHTTPCallOptions
    )
  }

  //// Get debug info.
  //// Input should be an encrypted GetOfframpDebugInfoRequest, output is an encrypted GetOfframpDebugInfoResponse.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOfframpDebugInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOfframpDebugInfo(
    _ request: Attest_Message,
    callOptions: HTTPCallOptions? = nil
  ) -> HTTPUnaryCall<Attest_Message, Attest_Message> {
    return self.makeUnaryCall(
      path: Mistyswap_MistyswapOfframpApiClientMetadata.Methods.getOfframpDebugInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultHTTPCallOptions
    )
  }
}

public final class Mistyswap_MistyswapOfframpApiRestClient: Mistyswap_MistyswapOfframpApiRestClientProtocol {
  public var defaultHTTPCallOptions: HTTPCallOptions

  /// Creates a client for the mistyswap.MistyswapOfframpApi service.
  ///
  /// - Parameters:
  ///   - defaultHTTPCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(
    defaultHTTPCallOptions: HTTPCallOptions = HTTPCallOptions()
  ) {
    self.defaultHTTPCallOptions = defaultHTTPCallOptions
  }
}

public enum Mistyswap_MistyswapOfframpApiClientMetadata {
  public static let serviceDescriptor = HTTPServiceDescriptor(
    name: "MistyswapOfframpApi",
    fullName: "mistyswap.MistyswapOfframpApi",
    methods: [
      Mistyswap_MistyswapOfframpApiClientMetadata.Methods.initiateOfframp,
      Mistyswap_MistyswapOfframpApiClientMetadata.Methods.forgetOfframp,
      Mistyswap_MistyswapOfframpApiClientMetadata.Methods.getOfframpStatus,
      Mistyswap_MistyswapOfframpApiClientMetadata.Methods.getOfframpDebugInfo,
    ]
  )

  public enum Methods {
    public static let initiateOfframp = HTTPMethodDescriptor(
      name: "InitiateOfframp",
      path: "/mistyswap.MistyswapOfframpApi/InitiateOfframp",
      type: HTTPCallType.unary
    )

    public static let forgetOfframp = HTTPMethodDescriptor(
      name: "ForgetOfframp",
      path: "/mistyswap.MistyswapOfframpApi/ForgetOfframp",
      type: HTTPCallType.unary
    )

    public static let getOfframpStatus = HTTPMethodDescriptor(
      name: "GetOfframpStatus",
      path: "/mistyswap.MistyswapOfframpApi/GetOfframpStatus",
      type: HTTPCallType.unary
    )

    public static let getOfframpDebugInfo = HTTPMethodDescriptor(
      name: "GetOfframpDebugInfo",
      path: "/mistyswap.MistyswapOfframpApi/GetOfframpDebugInfo",
      type: HTTPCallType.unary
    )
  }
}

